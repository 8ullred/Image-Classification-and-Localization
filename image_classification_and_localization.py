# -*- coding: utf-8 -*-
"""Image Classification and Localization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ODLDqsskm21wTc5alDQBW_aYoWLLEKe
"""

import matplotlib.pyplot as plt
import tensorflow as tf
import os
import numpy as np

from tensorflow.keras.layers import Dense, BatchNormalization, Conv2D, Dropout

!wget https://github.com/hfg-gmuend/openmoji/releases/latest/download/openmoji-72x72-color.zip

!mkdir EmojiDetection

!unzip -q openmoji-72x72-color.zip -d ./EmojiDetection/

from contextlib import aclosing
emojifiles = {
    0: {'name': 'happy', 'file': '1F642.png'},
    1: {'name': 'laughing', 'file': '1F602.png'},
    2: {'name': 'skeptical', 'file': '1F928.png'},
    3: {'name': 'sad', 'file': '1F630.png'},
    4: {'name': 'cool', 'file': '1F60E.png'},
    5: {'name': 'whoa', 'file': '1F62F.png'},
    6: {'name': 'crying', 'file': '1F62D.png'},
    7: {'name': 'puking', 'file': '1F92E.png'},
    8: {'name': 'nervous', 'file': '1F62C.png'}

}

for x, (y, z) in enumerate(emojifiles.items()):
  plt.subplot(3, 3, x+1)
  path = os.path.join("EmojiDetection", z['file'])
  plt.imshow(plt.imread(path))
  plt.title(z['name'])
  plt.xticks([])
  plt.yticks([])

plt.show()

from PIL import Image, ImageDraw

for x, (y, z) in enumerate(emojifiles.items()):
  imageopen = Image.open(os.path.join("EmojiDetection", z['file'])).convert("RGBA")
  imageopen.load()
  imagenew = Image.new("RGB", imageopen.size, (255, 255, 255))
  imagenew.paste(imageopen, mask = imageopen.split()[3])
  emojifiles[x]['image'] = imagenew

emojifiles

def create_image(emojifiles):
  randnum_class = np.random.randint(0, 9)
  newimage = np.ones([144, 144, 3])*255
  col = np.random.randint(0, 72)
  row = np.random.randint(0, 72)
  newimage[row:row + 72, col:col + 72] = emojifiles[randnum_class]['image']
  classID = randnum_class
  return newimage.astype('uint8'), row, col, classID

newimage, row, col, classID= create_image(emojifiles)
plt.imshow(newimage)

def plot_BoundingBox(emojifiles, predicted):
  newimage, row, col, classID = create_image(emojifiles)
  newimage = Image.fromarray(newimage)
  draw = ImageDraw.Draw(newimage)
  if predicted:
     draw.rectangle((col + 10, row + 10, col + 72 - 10, row + 72 - 10), outline = 'red')
  else:
      draw.rectangle((col + 10, row + 10, col + 72 - 10, row + 72 - 10), outline = 'green')



  return newimage

newimage = plot_BoundingBox(emojifiles, True)
plt.imshow(newimage)

newimage, row, col, classID = create_image(emojifiles)
Image.fromarray(newimage)

def DataGenerator(batchsize = 20):
  while True:
    x_batch = np.zeros((batchsize, 144, 144, 3))
    y_batch = np.zeros((batchsize, 9))
    bbx_batch = np.zeros((batchsize, 2))
    for i in range(batchsize):
      newimage, row, col, classID = create_image(emojifiles)
      x_batch[i] = newimage
      y_batch[i, classID] = 1.0
      bbx_batch[i] = [row, col]
    yield {"image":x_batch}, {"ClassID":y_batch, "bbx_out":bbx_batch}

out = next(DataGenerator(1))
out